msc {
  wordwraparcs=on,
  hscale="0.95",
  watermark="OP-TEE Benchmark";

  tee [label="TEE", linecolor="darkgreen", textcolor="white", textbgcolor="darkgreen", arclinecolor="darkgreen", arctextcolor="darkgreen"],
  kernel [label="Kernel", linecolor="maroon", textcolor="white", textbgcolor="maroon", arclinecolor="maroon", arctextcolor="maroon"],
  libteec [label="libteec", linecolor="#3a5795", textcolor="white", textbgcolor="#3a5795", arclinecolor="#3a5795", arctextcolor="#3a5795"],
  client [label="Benchmark CA/\nRegular CA", linecolor="#3a5795", textcolor="white", textbgcolor="#3a5795", arclinecolor="#3a5795", arctextcolor="#3a5795"];

  ...[label="Benchmak CA is used to setup the benchmark environment (allocation/registering of the benchmark shared buffers) and then to fork itself into target tested application with eventual CLI arguments. Once the target test application ends, timestamp data are made available in the generated .ts file(s)."];
  ...;
  ... [label="1. Allocate per-cpu timestamp ringbuffers"];
  client => kernel [label="Allocate shared mem for per-cpu timestamp buffers"];
  client << kernel;

  ... [label="2. Register timestamp buffers in the PTA"];
  client => libteec [label="TEEC_InvokeCommand(\nBENCHMARK_\nCMD_REGISTER_\nMEMREF)"];
  libteec => kernel;
  kernel >> tee [label="register_benchmark_memref()"];
  ...;
  tee => tee [label="Store benchmark buffer memref"];
  ...;
  ...;
  tee => kernel [label="Register memref in OP-TEE kmod via RPC"];
  kernel => kernel [label="Store benchmark buffer memref"];
  kernel >> tee;
  ... [label="Jump back through all layers"];
  tee >> client;

  ... [label="3. Benchmarking is active now. Fork()/Exec() Regular CA, bypassed as a param to Benchmark CA"];

  client => libteec [label="TEEC_InvokeCommand \n to  regular TA"];
  ...;
  libteec => libteec [label="Open session to Benchmark Pseudo TA"];
  libteec => kernel [label="TEEC_InvokeCommand(\nBENCHMARK_\nGET_MEMREF)"];
  ...;
  kernel => tee [label="Invoke Pseudo TA"];
  ...;
  tee => tee [label="get_benchmark_memref()"];
  tee => libteec [label="Return back paddr\n of timestamp buffer"];
  libteec => libteec [label="Mmap paddr into client VA space"];
  ... [label="4. Now we can put obtain timestamps also from libTEEC"];
  ...;
  libteec => libteec [label="Resume TEEC_InvokeCommand of regular CA"];
}
